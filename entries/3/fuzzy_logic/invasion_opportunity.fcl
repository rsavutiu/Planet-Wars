/*
	Example: A tip calculation FIS (fuzzy inference system)
	Calculates tip based on 'servie' and 'food'

	If you want to about this example (and fuzzy logic), please
	read Matlab's tutorial on fuzzy logic toolbox
	http://www.mathworks.com/access/helpdesk/help/pdf_doc/fuzzy/fuzzy.pdf

									Pablo Cingolani
									pcingola@users.sourceforge.net
*/

FUNCTION_BLOCK invasion_opportunity	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	game_turn : INTEGER;
	distance : INTEGER;
	ships_surplus : INTEGER;
	planet_size: INTEGER
END_VAR

VAR_OUTPUT				// Define output variable
	opportunity : REAL;
END_VAR

FUZZIFY game_turn			// Fuzzify input variable 'game_turn': {'early' , 'mid', 'late'}
	TERM early := (0, 0) (10,1) (20,1) (60,0);
	TERM mid := (20, 0) (60,1) (80,1);
	TERM late := (60, 0) (80,1) (130,1) (160,0);
  RANGE := (0 .. 201) WITH 1; // Added range for turns
END_FUZZIFY

FUZZIFY distance			// Fuzzify input variable 'distance': { 'close', 'moderate', 'far' }
	TERM close := (0, 1) (15, 1) (30,0) ;
	TERM moderate := (15, 0) (30, 1) (40, 1) (60, 0);
	TERM far := (40, 0) (60, 1) (100, 1);
  RANGE := (0 .. 101) WITH 1; // Added range for distance (percentage of the biggest distance found)
END_FUZZIFY

FUZZIFY ships_surplus			// Fuzzify input variable 'ships_surplus': { 'deficit', 'even', 'surplus' }
	TERM deficit := (-10, 1) (-1, 1);
	TERM even := (-1, 0) (0, 1) (3, 1) (5, 0);
	TERM surplus := (3, 0) (5, 1) (10, 1);
  RANGE := (-10.0 .. 11.0) WITH 1; // Added range for ships surplus. We need even for even at least a couple of ships there...
END_FUZZIFY

FUZZIFY planet_size			// Fuzzify input variable 'planet_size': { 'puny', 'small', 'medium', 'large', 'huge' }
	TERM puny := (0, 1) (2, 0);
	TERM small := (0, 0) (2, 1) (4, 0);
	TERM medium := (2, 0) (4, 1) (6, 0);
	TERM large := (4, 0) (6, 1) (10, 1) (12, 0);
	TERM huge := (10, 0) (10, 1) (20, 1);
  RANGE := (0 .. 17) WITH 1; // Added range for ships surplus. We need even for even at least a couple of ships there...
END_FUZZIFY

DEFUZZIFY opportunity			// Defuzzify output variable 'opportunity' : {'good', 'mediocre', 'bad'}
	TERM bad := (0.0, 0) (0.2, 1) (0.4, 0);
	TERM mediocre := (0.4, 0) (0.6, 1) (0.7, 0);
	TERM good := (0.6, 0) (0.7, 1) (1, 1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
  RANGE := (0.0 .. 1.0); // Added range for tip
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

    //Early game very picky
	RULE 1 : IF game_turn IS early AND (ships_surplus IS deficit OR distance IS far OR planet_size IS puny)  THEN opportunity IS bad;
	RULE 2 : IF game_turn IS early AND distance IS moderate AND (planet_size IS small OR planet_size IS puny)  THEN opportunity IS bad;
	RULE 3 : IF game_turn IS early AND distance IS moderate AND (planet_size IS medium OR planet_size IS large)  THEN opportunity IS mediocre;
	RULE 4 : IF game_turn IS early AND distance IS moderate AND planet_size IS huge  THEN opportunity IS mediocre;
	RULE 5 : IF game_turn IS late AND (planet_size IS small OR planet_size IS medium) AND (ships_surplus IS deficit OR distance IS far)  THEN opportunity IS bad;
    RULE 6 : IF (game_turn IS mid OR game_turn IS late) AND ships_surplus IS deficit AND distance IS far AND (planet_size IS puny OR planet_size IS small)  THEN opportunity IS bad;
    RULE 7 : IF (game_turn IS mid OR game_turn IS late) AND ships_surplus IS even AND distance IS moderate AND (planet_size IS puny OR planet_size IS small)  THEN opportunity IS bad;
    RULE 8 : IF ships_surplus IS even AND (distance IS moderate OR planet_size IS small) THEN opportunity IS bad;
    RULE 9 : IF ships_surplus IS even AND (distance IS far AND planet_size IS puny) THEN opportunity IS bad;
    RULE 10 : IF (game_turn IS mid OR game_turn IS late) AND (ships_surplus IS deficit OR distance IS far OR planet_size IS puny)  THEN opportunity IS bad;
    RULE 11 : IF game_turn IS late AND (planet_size IS small OR planet_size IS medium) AND ships_surplus IS even AND (distance IS far OR distance is moderate)  THEN opportunity IS mediocre;
    RULE 12 : IF game_turn IS late AND (planet_size IS small OR planet_size IS medium) AND ships_surplus IS surplus AND (distance IS close)  THEN opportunity IS good;
    RULE 13 : IF game_turn IS late AND (planet_size IS large OR planet_size IS huge) AND (ships_surplus IS even OR ships_surplus IS surplus)  THEN opportunity IS good;
    RULE 14 : IF (game_turn IS mid OR game_turn IS early) AND (planet_size IS large OR planet_size IS huge OR planet_size IS medium OR planet_size IS small) AND (ships_surplus IS even OR ships_surplus IS surplus) AND (distance IS far OR distance is moderate)  THEN opportunity IS good;
    RULE 15 : IF game_turn IS mid OR game_turn IS early AND (planet_size IS large OR planet_size IS huge OR planet_size IS medium OR planet_size IS small) AND (ships_surplus IS even OR ships_surplus IS surplus) AND (distance IS far OR distance is moderate)  THEN opportunity IS good;

END_RULEBLOCK

END_FUNCTION_BLOCK